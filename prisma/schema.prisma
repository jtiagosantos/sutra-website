generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
}

enum QuizStatus {
  IN_ANALYSIS
  DONE
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email            String       @unique
  firstName        String       @map("first_name")
  lastName         String       @map("last_name")
  avatar           String
  subscription     Subscription
  score            Int          @default(0)
  level            Int          @default(0)
  dailyQuizCount   Int          @default(0) @map("daily_quiz_count")
  lastQuizPlayedAt DateTime?    @map("last_quiz_played_at")
  customerId       String       @unique @map("customer_id")

  /// [Preferences]
  preferences Json

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quizzes        Quiz[]
  newQuizzes     NewQuiz[]
  medals         UserMedal[]
  quizzesHistory QuizHistory[]

  @@map("users")
}

model Quiz {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  book      Book
  questions Question[]

  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  @@map("quizzes")
}

model NewQuiz {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  book         NewBook
  questions    Question[]
  timesPlayed  Int        @default(0) @map("times_played")
  categories   String[]
  tags         String[]
  summary      String
  purchaseLink String?    @map("purchase_link")
  status       QuizStatus

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  @@map("newquizzes")
}

model Medal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  description   String
  image         String
  levelRequired Int    @unique @map("level_required")

  createdAt DateTime @default(now()) @map("created_at")

  usersMedals UserMedal[]

  @@map("medals")
}

model UserMedal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  viewedAt  DateTime? @map("viewed_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  medal   Medal  @relation(fields: [medalId], references: [id])
  medalId String @map("medal_id") @db.ObjectId

  @@map("users_medals")
}

model QuizHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  numberOfCorrect   Int @map("number_of_correct")
  numberOfIncorrect Int @map("number_of_incorrect")
  numberOfQuestions Int @map("number_of_questions")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.ObjectId

  playedAt DateTime @default(now()) @map("played_at")

  @@map("quizzes_history")
}

model QuizCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String @unique
  value String @unique

  @@map("quiz_categories")
}

type Subscription {
  status SubscriptionStatus
}

type Book {
  title  String
  author String
}

type NewBook {
  title  String
  author String
  cover  String
}

type Question {
  title   String
  answers Answer[]
  correct String
}

type Answer {
  id   String
  text String
}
